// <auto-generated />
using System;
using MedHub.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedHub.Infrastructure.Migrations
{
    [DbContext(typeof(MedHubContext))]
    [Migration("20221121044234_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("MedHub.Domain.Models.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DrugId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("Allergens");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Cabinet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cabinets");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CabinetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("MedHub.Domain.Models.MedicalSpeciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("MedicalSpecialities");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Allergen", b =>
                {
                    b.HasOne("MedHub.Domain.Models.Drug", null)
                        .WithMany("Allergens")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Drug", b =>
                {
                    b.HasOne("MedHub.Domain.Models.Cabinet", null)
                        .WithMany("Drugs")
                        .HasForeignKey("CabinetId");

                    b.HasOne("MedHub.Domain.Models.Invoice", null)
                        .WithMany("Drugs")
                        .HasForeignKey("InvoiceId");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Invoice", b =>
                {
                    b.HasOne("MedHub.Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHub.Domain.Models.MedicalSpeciality", b =>
                {
                    b.HasOne("MedHub.Domain.Models.Doctor", null)
                        .WithMany("SpecializationsList")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Cabinet", b =>
                {
                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Doctor", b =>
                {
                    b.Navigation("SpecializationsList");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Drug", b =>
                {
                    b.Navigation("Allergens");
                });

            modelBuilder.Entity("MedHub.Domain.Models.Invoice", b =>
                {
                    b.Navigation("Drugs");
                });
#pragma warning restore 612, 618
        }
    }
}
